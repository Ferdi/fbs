<?php
//$Id

/**
 * Minimum CTools version needed.
 */
define('FBS_REQUIRED_CTOOLS_API', '1.7.1');

function fbs_menu(){
  $items = array();
  $items['fbs'] = array(
    'title' => 'fbs',
    'page callback' => 'fbs',
    'access arguments' => array('access content'),
  );
  return $items;
}

function fbs(){
  ctools_include('export');
  dpm(ctools_export_load_object('fbs_presets', 'names', array('third')));
  dpm(ctools_export_crud_load('fbs_presets', 'third'));
  return 'fbs';
}

function fbs_include($file){
  ctools_include($file, $module = 'fbs', $dir = 'includes');
}

/**
 * Supported facebook plugins
 */
function fbs_fb_plugins(){
  return array(
    'activityfeed',
    'comments',
    'facepile',
    'like',
    'likebox',
  	'comments',
    'livestream',
    'loginbutton',
    'recommendations'
  );
}



function fbs_plugin_defaults($plugin_name){
  fbs_include('fbs_definition_' . $plugin_name);
  $func = 'fbs_definition_' . $plugin_name . '_defaults';
  return call_user_func($func);
}

function fbs_plugin_options_form($plugin_name){
  fbs_include('fbs_definition_' . $plugin_name);
  $func = 'fbs_definition_' . $plugin_name . '_options_form';
  return call_user_func($func);
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function fbs_ctools_plugin_api($module, $api) {
  if ($module == 'fbs' && $api == 'fbs') {
    return array('version' => 1);
  }
  //boxes
  if ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function fbs_ctools_plugin_directory($module, $type) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', FBS_REQUIRED_CTOOLS_API)) {
    return;
  }

  if ($module =='fbs' && $type == 'plugins') {
    return 'plugins/fbs';
  }
  elseif ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

function fbs_fbs_default_presets(){
  $export = array();
  $fbs_presets = new stdClass();
  $fbs_presets->disabled = FALSE; /* Edit this to true to make a default fbs_presets disabled initially */
  $fbs_presets->api_version = 1;
  $fbs_presets->name = 'fb_like_default';
  $fbs_presets->description = 'the default ';
  $fbs_presets->widget_type = 'likebox';
  $fbs_presets->d_settings = FALSE;
  $fbs_presets->fb_settings = array(
      'layout_style' => 'button_count', 
      'show_faces' => 0, 
      'width' => '350', 
      'verb' => 'like', 
      'font' => 'verdana', 
      'color' => 'dark' 
  );  

  
  $export['fb_like_default'] = $fbs_presets;

  return $export;
}


// boxes 
/**
 * Implementation of hook_boxes_plugins().
 */
function fbs_boxes_plugins() {
  $info = array();
  $info['fbs_boxes_like'] = array(
    'title' => 'facebook social like',
    'handler' => array(
      'class' => 'fbs_boxes_like',
      'file' => 'fbs_boxes_like.inc',
      'path' => drupal_get_path('module', 'fbs') .'/boxes',
      'parent' => 'box',
    ),
  );
  
  $info['fbs_boxes_likebox'] = array(
    'title' => 'facebook social likebox',
    'handler' => array(
      'class' => 'fbs_boxes_likebox',
      'file' => 'fbs_boxes_likebox.inc',
      'path' => drupal_get_path('module', 'fbs') .'/boxes',
      'parent' => 'box',
    ),
  );
  
  /*
  $info['fbs_boxes_comment'] = array(
    'title' => 'facebook social comment',
    'handler' => array(
      'class' => 'fbs_boxes_comment',
      'file' => 'fbs_boxes_comment.inc',
      'path' => drupal_get_path('module', 'fbs') .'/boxes',
      'parent' => 'box',
    ),
  );
  */

  return $info;
}

/**
 * Implementation of hook_theme
 */
function fbs_theme() {
  return array(
    'fbs_preset' => array(
       'arguments' => array('preset' => NULL),
    ),
    'fbs_box' => array(
       'arguments' => array('box' => NULL),
    ),
  );
}

/**
 * returns the fbml content of the widget
 */
function theme_fbs_preset($preset){
  
  $attrs = $preset -> fb_settings;
  $attrs = drupal_attributes($attrs);
  $widget_type = $preset -> widget_type;
  
  return '<div class="fbs-'.$widget_type.'-widget"><fb:' . $widget_type .' ' . $attrs . '></fb:'.$widget_type.'></div>';

}

/**
 * returns the fbml content of the widget
 */
function theme_fbs_box($box){
  dpm($box);

  $attrs = $box -> options;
  $attrs = drupal_attributes($attrs);
  $widget_type = $box -> plugin_key;
  
  return '<div class="fbs-'.$widget_type.'-widget"><fb:' . $widget_type .' ' . $attrs . '></fb:'.$widget_type.'></div>';

}


/**
 * Implementation of hook_footer
 */
function fbs_footer($main = 0) {
  global $language;

  $languages = _map_active_languages();

  if (fbs_auto_language()) {
    if (array_key_exists($language->language, $languages)) {
      $fb_locale = $languages[$language->language];
    } else {
      drupal_set_message("There is no mapping for the current language. Using the default locale.");
    }
  } else {
    $fb_locale = variable_get('fbs_locale', 'en_US');
  }

  
  $appid = variable_get('fbs_appid', '');

  $output = '<div id="fb-root"></div>';
  $output .=  
  "<script type=\"text/javascript\">
     window.fbAsyncInit = function() {
       FB.init({
         appId: " . drupal_to_js($appid) .",
         status: true, 
         cookie: true,
         xfbml: true});
       
         jQuery.event.trigger('fb:init');    
     };
     (function() {
       var e = document.createElement('script'); 
       e.async = true;
       e.src = document.location.protocol + '//connect.facebook.net/" . $fb_locale  . "/all.js';
       document.getElementById('fb-root').appendChild(e);
     }());
  </script>";
  
  return $output;
}

function fbs_auto_language() {
  return variable_get('fbs_locale_auto', 0);
}

function _map_active_languages() {
  $languages = language_list();
  $mapped = array();
  foreach ($languages as $key => $language) {
    $mapped[$language->language] = variable_get('fbs_language_' . $language->language, '');
  }
  return $mapped;
}

// API functions

/**
 *  Based on the user settings return the aliased / unaliased version
 *  of a given $url
 */
function fbs_url($url = NULL){
  $aliased = variable_get('fbs_urls_mode', 0);
  return url($url, array('absolute' => TRUE, 'alias' => $aliased ));
}

